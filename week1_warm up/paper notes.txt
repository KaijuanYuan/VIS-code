JavaScript evaluates expressions from left to right. Different sequences can produce different results:

JavaScript:
var x = 16 + 4 + "Volvo";
Result:
20Volvo


You can empty an object by setting it to null:

If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.

Your global variables (or functions) can overwrite window variables (or functions).
Any function, including the window object, can overwrite your global variables and functions.


The replace() method does not change the string it is called on. It returns a new string.

parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:



Example Explained
The variable add is assigned the return value of a self-invoking function.

The self-invoking function only runs once. It sets the counter to zero (0), and returns a function expression.

This way add becomes a function. The "wonderful" part is that it can access the counter in the parent scope.

This is called a JavaScript closure. It makes it possible for a function to have "private" variables.

The counter is protected by the scope of the anonymous function, and can only be changed using the add function.

A closure is a function having access to the parent scope, even after the parent function has closed.